--- ./VTK/VTK/Filters/General/vtkIntersectionPolyDataFilter.cxx	2019-11-07 13:18:31.143575760 +1100
+++ ./b/Filters/General/vtkIntersectionPolyDataFilter.cxx	2019-11-07 18:32:01.999498634 +1100
@@ -2095,46 +2095,87 @@
   int index1 = 0, index2 = 0;
   double t1[3], t2[3];
   int ts1=50, ts2=50;
-  for (int i = 0; i < 3; i++)
+  int loopcount = 1;
+
+  //while((ts1 == 50 || ts2 == 50) && ((tolerance * loopcount) < 1))
+  while(loopcount < 3)
   {
-    double t, x[3];
-    int id1 = i, id2 = (i+1) % 3;
+      index1 = 0;
+      index2 = 0;
+      ts1 = 50;
+      ts2 = 50;
+      if(loopcount > 1)
+      {
+	      cout << "vtkIntersectionPolyDataFilter::TriangleTriangleIntersection problematic triangle pair" << endl;
+      }
+      for (int i = 0; i < 3; i++)
+      {
+        double t, x[3];
+        int id1 = i, id2 = (i+1) % 3;
 
-    // Find t coordinate on line of intersection between two planes.
-    double val1 = vtkPlane::IntersectWithLine(pts1[id1], pts1[id2], n2, p2, t, x);
-    if (val1 == 1 ||
-        (t > (0-tolerance) && t < (1+tolerance)))
-    {
-         if (t < 1+tolerance && t > 1-tolerance)
-         {
-           ts1 = index1;
-         }
-
-         t1[index1++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
-    }
-
-    double val2 = vtkPlane::IntersectWithLine(pts2[id1], pts2[id2], n1, p1, t, x);
-    if (val2 == 1 ||
-        (t > (0-tolerance) && t < (1+tolerance)))
-    {
-        if (t < 1+tolerance && t > 1-tolerance)
+        // Find t coordinate on line of intersection between two planes.
+        double val1 = vtkPlane::IntersectWithLine(pts1[id1], pts1[id2], n2, p2, t, x);
+        if(loopcount > 1)
+        {
+		cout << "val1: " << val1 << ", t: " << t <<  endl;
+		cout << "[" << pts1[id1][0] << " " << pts1[id1][1] << " " << pts1[id1][2] << "; " <<
+			       pts1[id2][0] << " " << pts1[id2][1] << " " << pts1[id2][2] << "]" << endl; 
+	}	
+        if (val1 == 1 ||
+            (t > (0-tolerance) && t < (1+tolerance)))
         {
-          ts2 = index2;
+             if (t < 1+tolerance && t >= 1-tolerance)
+             {
+               ts1 = index1;
+             }
+
+             t1[index1++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
         }
 
-        t2[index2++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
-    }
+        double val2 = vtkPlane::IntersectWithLine(pts2[id1], pts2[id2], n1, p1, t, x);
+        if(loopcount > 1)
+        {
+		cout << "val2: " << val2 << ", t: " << t << endl;
+		cout << "[" << pts2[id1][0] << " " << pts2[id1][1] << " " << pts2[id1][2] << "; " <<
+			       pts2[id2][0] << " " << pts2[id2][1] << " " << pts2[id2][2] << "]" << endl; 
+	}	
+        if (val2 == 1 ||
+            (t > (0-tolerance) && t < (1+tolerance)))
+        {
+            if (t < 1+tolerance && t >= 1-tolerance)
+            {
+              ts2 = index2;
+            }
+
+            t2[index2++] = vtkMath::Dot(x, v) - vtkMath::Dot(p, v);
+        }
+      }
+      if(loopcount > 1)
+      {
+	    cout << loopcount << " " << ts1 << " " << ts2 << endl;
+      }
+      if(!((index1 == 3 && ts1 == 50) || (index2 == 3 && ts2 == 50)))
+      {
+	      break;
+      }
+      loopcount++; 
   }
 
+  if((index1 == 3 && ts1 == 50) || (index2 == 3 && ts2 == 50))
+  {
+        cout << "triangles = " << endl;
+        cout << "[" << p1[0] << " " << p1[1] << " " << p1[2] << "; " << q1[0] << " " << q1[1] << " " << q1[2] << "; " << r1[0] << " " << r1[1] << " " << r1[2] << "; ..." << endl;
+        cout <<        p2[0] << " " << p2[1] << " " << p2[2] << "; " << q2[0] << " " << q2[1] << " " << q2[2] << "; " << r2[0] << " " << r2[1] << " " << r2[2] << "];" << endl;
+  }
   //If the value of the index is greater than 2, the intersecting point
   //actually is intersected by all three edges. In this case, set the two
   //edges to the two edges where the intersecting point is not the end point
-  if (index1 > 2)
+  if (index1 > 2 && ts1 < 50)
   {
     index1--;
     std::swap(t1[ts1], t1[2]);
   }
-  if (index2 > 2)
+  if (index2 > 2 && ts2 < 50)
   {
     index2--;
     std::swap(t2[ts2], t2[2]);
