#!/usr/bin/env python3

import vtk
import numpy
import sys
import os
import nibabel

# append python paths
P = os.path.realpath(__file__)
head, tail = os.path.split(P)
sys.path.append(os.path.join(head, '..', 'lib', 'python'))

del P
del head
del tail

import freesurfer
if len(sys.argv) < 4:
    print("Incorrect number of arguments")
    print()
    print("Usage: " + sys.argv[0] + " <vtp file> <volume> <fs file>")
    quit()

inFileName = sys.argv[1]

if not os.path.isfile(inFileName):
    print("Input file not found")
    quit()

Reader = vtk.vtkXMLPolyDataReader()
Reader.SetFileName(inFileName)
Reader.Update()

Data = Reader.GetOutput()
Vrts = Data.GetVerts()
indices = [Vrts.GetData().GetValue(i) for i in range(1, Vrts.GetSize())]

S = dict()
S['vertices'] = [list(Data.GetPoint(point_id)) for point_id in range(Data.GetNumberOfPoints())]
S['vertices'] = numpy.stack(S['vertices']).T

if Data.GetNumberOfPolys() > 0:
    S['faces'] = [[int(Data.GetPolys().GetData().GetValue(j)) for j in range(i*4 + 1, i*4 + 4)] for i in range(Data.GetPolys().GetNumberOfCells())]
    S['faces'] = numpy.stack(S['faces']).T
    #S['faces'] = numpy.take(S['faces'], numpy.array([0, 2, 1]), axis = 0)

#if checkForNegativeArea == True:
#    surfA = numpy.take(S['vertices'], S['faces'][0], axis = 1)
#    surfB = numpy.take(S['vertices'], S['faces'][1], axis = 1)
    #surfC = numpy.take(S['vertices'], S['faces'][2], axis = 1)

#    CrossABAC = numpy.cross(surfB - surfA, surfC - surfA

#numpy.set_printoptions(precision=4, formatter={'float': '{: 0.3f}'.format})
freesurfer.writeSurf(S, sys.argv[3], fileFormat = 'binary', geometryNIIFile = sys.argv[2])
##freesurfer.writeSurf(S, sys.argv[3] + ".nogeom", fileFormat = 'binary', geometryNIIFile = None)
